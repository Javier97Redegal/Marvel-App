import '@testing-library/jest-dom'
import { act, render, screen } from '@testing-library/react'
import { AppProvider, useApp } from '.'
import { GetCharactersResultType } from '@/utils/MarvelAPI/AutoGeneratedTypes/GetCharacters.types'

const MockComponent = () => {
    const { favorites, addFavorite, removeFavorite } = useApp()

    return (
        <div>
            <div>Favorites: {favorites.length}</div>
            <button onClick={() => addFavorite({ id: 1, name: 'Spider-Man', thumbnail: { path: 'path/to/spiderman', extension: 'jpg' } } as GetCharactersResultType)}>Add Spider-Man</button>
            <button onClick={() => removeFavorite({ id: 1, name: 'Spider-Man', thumbnail: { path: 'path/to/spiderman', extension: 'jpg' } } as GetCharactersResultType)}>Remove Spider-Man</button>
        </div>
    )
}

describe('AppContext test', () => {
    it('provides and updates favorites', () => {
        render(
            <AppProvider>
                <MockComponent />
            </AppProvider>
        )

        const addButton = screen.getByText('Add Spider-Man')
        const removeButton = screen.getByText('Remove Spider-Man')

        expect(screen.getByText('Favorites: 0')).toBeInTheDocument()
        act(() => addButton.click())
        expect(screen.getByText('Favorites: 1')).toBeInTheDocument()
        act(() => removeButton.click())
        expect(screen.getByText('Favorites: 0')).toBeInTheDocument()
    })

    it('throws error when useApp is used outside AppProvider', () => {
        const consoleError = jest.spyOn(console, 'error').mockImplementation(() => { })

        expect(() => render(<MockComponent />)).toThrow('useApp must be used within a AppProvider')

        consoleError.mockRestore()
    })
})
