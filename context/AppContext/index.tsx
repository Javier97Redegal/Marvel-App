import { createContext, useState, ReactNode, useContext, useEffect } from 'react'
import { DEFAULT_CHARACTER_CARD, DEFAULT_SEARCH_LIMIT } from '@/constants'
import { GetCharactersResultType } from '@/utils/MarvelAPI/AutoGeneratedTypes/GetCharacters.types'
import { getCharacters } from '@/utils/MarvelAPI'
import { AppContextProps } from './types'

const AppContext = createContext<AppContextProps | undefined>(undefined)

export const AppProvider = ({ children }: { children: ReactNode }) => {
    const [search, setSearch] = useState<string>('')
    const [characters, setCharacters] = useState<GetCharactersResultType[]>(Array.apply(null, Array(DEFAULT_SEARCH_LIMIT)).map(() => DEFAULT_CHARACTER_CARD))

    useEffect(() => {
        const fetchCharacters = async () => {
            const response = await getCharacters({
                params: {
                    limit: DEFAULT_SEARCH_LIMIT,
                },
            })

            setCharacters(response.data.results)
        }

        fetchCharacters()
    }, [])

    useEffect(() => {
        const fetchCharacters = async () => {
            const response = await getCharacters({
                params: {
                    limit: DEFAULT_SEARCH_LIMIT,
                },
            })

            setCharacters(response.data.results)
        }

        fetchCharacters()
    }, [search])

    return <>
        <AppContext.Provider value={{ characters, setSearch }}>
            {children}
        </AppContext.Provider>
    </>
}

export const useApp = () => {
    const context = useContext(AppContext)

    if (!context) {
        throw new Error('useApp must be used within a AppProvider')
    }

    return context
}