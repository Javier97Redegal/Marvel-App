import { createContext, useState, ReactNode, useContext, useEffect } from 'react'
import { DEFAULT_SEARCH_LIMIT } from '@/constants'
import { GetCharactersResultType } from '@/utils/MarvelAPI/AutoGeneratedTypes/GetCharacters.types'
import { getCharacters } from '@/utils/MarvelAPI'
import { SearchContextProps } from './types'

const SearchContext = createContext<SearchContextProps | undefined>(undefined)

export const SearchProvider = ({ children }: { children: ReactNode }) => {
    const [search, setSearch] = useState<string>('')
    const [isLoading, setIsLoading] = useState<boolean>(true)
    const [defaultCharacters, setDefaultCharacters] = useState<GetCharactersResultType[]>([])
    const [characters, setCharacters] = useState<GetCharactersResultType[]>([])

    useEffect(() => {
        setIsLoading(true)

        if (!search && defaultCharacters.length) {
            setCharacters(defaultCharacters)
            setIsLoading(false)
            return
        }

        const fetchCharacters = async () => {
            const response = await getCharacters({
                params: {
                    limit: DEFAULT_SEARCH_LIMIT,
                    ...(!!search && { nameStartsWith: search.toLowerCase() })
                },
            })

            if (!defaultCharacters.length) {
                const defaultSearch = await getCharacters({
                    params: {
                        limit: DEFAULT_SEARCH_LIMIT,
                        ...(!!search && { nameStartsWith: search.toLowerCase() })
                    },
                })

                setDefaultCharacters(defaultSearch.data.results)
            }

            setCharacters(response.data.results)
            setIsLoading(false)
        }

        fetchCharacters()
    }, [search])

    return <>
        <SearchContext.Provider value={{ characters, searchTotal: setSearch, isLoading }}>
            {children}
        </SearchContext.Provider>
    </>
}

export const useSearch = () => {
    const context = useContext(SearchContext)

    if (!context) {
        throw new Error('useSearch must be used within a AppProvider')
    }

    return context
}