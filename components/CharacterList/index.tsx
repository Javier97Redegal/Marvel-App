import { useQuery } from 'react-query'
import { useApp } from '@/context/AppContext'
import { getCharacters } from '@/utils/MarvelAPI'
import CharacterCard from '@/components/CharacterCard'
import LoadingPanel from '@/components/LoadingPanel'
import { DEFAULT_SEARCH_LIMIT, TYPES_OF_CHARACTER_LIST } from '@/constants'
import styles from './index.module.css'
import { CharacterListProps } from './types'
import { getResultsMessage } from './helpers'
import { GetCharactersResultType } from '@/utils/MarvelAPI/AutoGeneratedTypes/GetCharacters.types'

const CharacterList = ({
    mode,
    query,
}: CharacterListProps) => {
    const { favorites } = useApp()

    let characters: GetCharactersResultType[] = []

    switch (mode) {
        case TYPES_OF_CHARACTER_LIST.FAVORITES:
            characters = favorites

            break;

        default:
            const fetchCharacters = async () => await getCharacters({ params: { limit: DEFAULT_SEARCH_LIMIT, ...(!!query && { nameStartsWith: query.toLowerCase() }) } })
            const { data, status } = useQuery(`search-${!query ? 'total' : query}`, fetchCharacters)

            if (status !== 'success') return <LoadingPanel type={status} />

            characters = data.data.results

            break;
    }

    return <>
        <div className={styles.totals}>{characters.length} {getResultsMessage(characters.length)}</div>
        {mode === TYPES_OF_CHARACTER_LIST.FAVORITES && <h2 className={styles.header}>Favorites</h2>}
        {!!characters.length ?
            <ul className={styles.list}>
                {characters.map((character, key) => (
                    <li key={key}>
                        <CharacterCard {...character} />
                    </li>
                ))}
            </ul> :
            <LoadingPanel type='success' />}
    </>
}

export default CharacterList