import '@testing-library/jest-dom'
import { render, screen, fireEvent } from '@testing-library/react'
import CharacterCard from '@/components/CharacterCard'
import { GetCharactersResultType } from '@/utils/MarvelAPI/AutoGeneratedTypes/GetCharacters.types'
import { useApp } from '@/context/AppContext'
import { handleFavoriteButton } from '@/helpers'


jest.mock('@/context/AppContext', () => ({
    useApp: jest.fn()
}))

jest.mock('@/helpers/index.tsx', () => ({
    handleFavoriteButton: jest.fn()
}))

jest.mock('next/link', () => jest.fn(({ children, href }) => <a href={href}>{children}</a>))

jest.mock('next/router', () => ({
    useRouter: jest.fn()
}))

describe('CharacterCard test', () => {
    const mockProps: GetCharactersResultType = {
        id: 12345,
        name: 'Spider-Man',
        thumbnail: {
            path: 'path/to/spiderman',
            extension: 'jpg'
        }
    }

    const mockUseApp = {
        favorites: [{ id: 12345 }],
        addFavorite: jest.fn(),
        removeFavorite: jest.fn()
    }

    beforeEach(() => {
        (useApp as jest.Mock).mockReturnValue(mockUseApp)
    })

    it('renders character details correctly', () => {
        const { asFragment } = render(<CharacterCard {...mockProps} />)

        expect(screen.getByText('Spider-Man')).toBeInTheDocument()
        expect(screen.getByRole('img', { name: 'Remove from Favorites' })).toBeInTheDocument()
        expect(asFragment()).toMatchSnapshot()
    })

    it('handles favorite button click', () => {
        render(<CharacterCard {...mockProps} />)

        const button = screen.getByRole('button')
        fireEvent.click(button)

        expect(handleFavoriteButton).toHaveBeenCalled()
    })

    it('displays "Add to Favorites" when not a favorite', () => {
        mockUseApp.favorites = []
        render(<CharacterCard {...mockProps} />)

        expect(screen.getByRole('img', { name: 'Add to Favorites' })).toBeInTheDocument()
    })
})
